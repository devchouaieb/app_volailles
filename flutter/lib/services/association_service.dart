import 'package:app_volailles/models/association.dart';
import 'package:app_volailles/services/api_service.dart';

class AssociationService {
  final _apiService = ApiService();

  // R√©cup√©rer toutes les associations
  Future<List<Association>> getAssociations() async {
    try {
      print('üîÑ R√©cup√©ration des associations...');
      final response = await _apiService.get('associations');
      print('üì¶ R√©ponse API: $response');

      if (response is List) {
        final associations =
            response.map((json) => Association.fromApi(json)).toList();
        print('‚úÖ ${associations.length} associations r√©cup√©r√©es');
        return associations;
      } else if (response is Map && response['data'] is List) {
        final associations =
            (response['data'] as List)
                .map((json) => Association.fromApi(json))
                .toList();
        print('‚úÖ ${associations.length} associations r√©cup√©r√©es');
        return associations;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des associations: $e');
      rethrow;
    }
  }

  // R√©cup√©rer une association par ID
  Future<Association?> getAssociation(String id) async {
    try {
      print('üîÑ R√©cup√©ration de l\'association $id...');
      final response = await _apiService.get('associations/$id');
      print('üì¶ R√©ponse API: $response');

      if (response is Map && response['data'] != null) {
        final association = Association.fromApi(response['data']);
        print('‚úÖ Association r√©cup√©r√©e avec succ√®s');
        return association;
      }

      print('‚ö†Ô∏è Association non trouv√©e');
      return null;
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l\'association: $e');
      return null;
    }
  }

  // Cr√©er une nouvelle association
  Future<Association> createAssociation(Association association) async {
    try {
      print('üîÑ Cr√©ation d\'une nouvelle association...');
      final response = await _apiService.post(
        'associations',
        association.toJson(),
      );
      print('üì¶ R√©ponse API: $response');

      if (response is Map) {
        final createdAssociation = Association.fromApi(
          Map<String, dynamic>.from(response),
        );
        print('‚úÖ Nouvelle association cr√©√©e: ${createdAssociation.name}');
        return createdAssociation;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la cr√©ation de l\'association: $e');
      rethrow;
    }
  }

  // Mettre √† jour une association
  Future<Association> updateAssociation(
    String id,
    Association association,
  ) async {
    try {
      print('üîÑ Mise √† jour de l\'association $id...');
      final response = await _apiService.put(
        'associations/$id',
        association.toJson(),
      );
      print('üì¶ R√©ponse API: $response');

      if (response is Map) {
        final updatedAssociation = Association.fromApi(
          Map<String, dynamic>.from(response),
        );
        print('‚úÖ Association mise √† jour: ${updatedAssociation.name}');
        return updatedAssociation;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la mise √† jour de l\'association: $e');
      rethrow;
    }
  }

  // Supprimer une association
  Future<void> deleteAssociation(String id) async {
    try {
      print('üîÑ Suppression de l\'association $id...');
      final response = await _apiService.delete('associations/$id');
      print('üì¶ R√©ponse API: $response');

      if (response == null || (response is Map && response['id'] == id)) {
        print('‚úÖ Association supprim√©e avec succ√®s');
        return;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la suppression de l\'association: $e');
      if (e.toString().contains('404')) {
        throw Exception('Association non trouv√©e');
      } else if (e.toString().contains('401')) {
        throw Exception('Non autoris√©');
      } else if (e.toString().contains('500')) {
        throw Exception('Erreur serveur. Veuillez r√©essayer plus tard.');
      }
      rethrow;
    }
  }
}
