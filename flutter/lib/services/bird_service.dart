// lib/services/bird_service.dart
import 'package:flutter/material.dart';
import 'package:app_volailles/models/bird.dart';
import 'package:app_volailles/services/api_service.dart';

class BirdService {
  final _apiService = ApiService();

  // R√©cup√©rer tous les oiseaux
  Future<List<Bird>> getBirds() async {
    try {
      print('üîÑ R√©cup√©ration des oiseaux...');
      final response = await _apiService.get('birds');
      print('üì¶ R√©ponse API: $response');

      if (response is List) {
        final birds = response.map((json) => Bird.fromApi(json)).toList();
        print('‚úÖ ${birds.length} oiseaux r√©cup√©r√©s');
        return birds;
      } else if (response is Map) {
        if (response['data'] is List) {
          final birds =
              (response['data'] as List)
                  .map((json) => Bird.fromApi(json))
                  .toList();
          print('‚úÖ ${birds.length} oiseaux r√©cup√©r√©s');
          return birds;
        } else if (response['birds'] is List) {
          final birds =
              (response['birds'] as List)
                  .map((json) => Bird.fromApi(json))
                  .toList();
          print('‚úÖ ${birds.length} oiseaux r√©cup√©r√©s');
          return birds;
        }
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des oiseaux: $e');
      rethrow;
    }
  }

  // R√©cup√©rer les oiseaux vendus
  Future<List<Bird>> getSoldBirds() async {
    try {
      print('üîÑ R√©cup√©ration des oiseaux vendus...');
      final response = await _apiService.get('birds/sold');
      print('üì¶ R√©ponse API: $response');
      if (response is List) {
        final birds = response.map((json) => Bird.fromApi(json)).toList();
        print('‚úÖ ${birds.length} oiseaux r√©cup√©r√©s');
        return birds;
      } else if (response is Map && response['data'] is List) {
        final birds =
            (response['data'] as List)
                .map((json) => Bird.fromApi(json))
                .toList();
        print('‚úÖ ${birds.length} oiseaux vendus r√©cup√©r√©s');
        return birds;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      return [];
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des oiseaux vendus: $e');
      return [];
    }
  }

  // R√©cup√©rer les oiseaux vendus par un vendeur sp√©cifique
  Future<List<Bird>> getSoldBirdsBySeller(String sellerId) async {
    try {
      print('üîÑ R√©cup√©ration des oiseaux vendus par le vendeur $sellerId...');
      final response = await _apiService.get('birds/sold/seller/$sellerId');
      print('üì¶ R√©ponse API: $response');

      if (response is Map && response['data'] is List) {
        final birds =
            (response['data'] as List)
                .map((json) => Bird.fromApi(json))
                .toList();
        print('‚úÖ ${birds.length} oiseaux vendus par ce vendeur r√©cup√©r√©s');
        return birds;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      return [];
    } catch (e) {
      print(
        '‚ö†Ô∏è Erreur lors de la r√©cup√©ration des oiseaux vendus par vendeur: $e',
      );
      return [];
    }
  }

  // R√©cup√©rer les oiseaux vendus avec les informations des acheteurs
  Future<List<Bird>> getSoldBirdsWithBuyers() async {
    try {
      print(
        'üîÑ R√©cup√©ration des oiseaux vendus avec informations acheteurs...',
      );
      final response = await _apiService.get('birds/sold/with-buyers');
      print('üì¶ R√©ponse API: $response');

      if (response is Map && response['data'] is List) {
        final birds =
            (response['data'] as List)
                .map((json) => Bird.fromApi(json))
                .toList();
        print('‚úÖ ${birds.length} oiseaux vendus avec acheteurs r√©cup√©r√©s');
        return birds;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      return [];
    } catch (e) {
      print(
        '‚ö†Ô∏è Erreur lors de la r√©cup√©ration des oiseaux vendus par vendeur: $e',
      );
      return [];
    }
  }

  // R√©cup√©rer un oiseau par ID
  Future<Bird?> getBird(String id) async {
    try {
      print('üîÑ R√©cup√©ration de l\'oiseau $id...');
      final response = await _apiService.get('birds/$id');
      print('üì¶ R√©ponse API: $response');

      if (response is Map && response['data'] != null) {
        final bird = Bird.fromApi(response['data']);
        print('‚úÖ Oiseau r√©cup√©r√© avec succ√®s');
        return bird;
      }

      print('‚ö†Ô∏è Oiseau non trouv√©');
      return null;
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l\'oiseau: $e');
      return null;
    }
  }

  // Cr√©er un nouvel oiseau
  Future<Bird> createBird(Bird bird) async {
    try {
      print('üîÑ Cr√©ation d\'un nouvel oiseau...');
      final response = await _apiService.post('birds', bird.toJson());
      print('üì¶ R√©ponse API: $response');

      if (response is Map) {
        final createdBird = Bird.fromApi(Map<String, dynamic>.from(response));
        print('‚úÖ Nouvel oiseau cr√©√©: ${createdBird.identifier}');
        return createdBird;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la cr√©ation de l\'oiseau: $e');
      rethrow;
    }
  }

  // Mettre √† jour un oiseau
  Future<Bird> updateBird(String id, Bird bird) async {
    try {
      print('üîÑ Mise √† jour de l\'oiseau $id...');
      final response = await _apiService.put('birds/$id', bird.toJson());
      print('üì¶ R√©ponse API: $response');

      if (response is Map) {
        final updatedBird = Bird.fromApi(Map<String, dynamic>.from(response));
        print('‚úÖ Oiseau mis √† jour: ${updatedBird.identifier}');
        return updatedBird;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la mise √† jour de l\'oiseau: $e');
      rethrow;
    }
  }

  // Supprimer un oiseau
  Future<void> deleteBird(String id) async {
    try {
      print('üîÑ Suppression de l\'oiseau $id...');
      final response = await _apiService.delete('birds/$id');
      print('üì¶ R√©ponse API: $response');

      if (response == null || (response is Map && response['id'] == id)) {
        print('‚úÖ Oiseau supprim√© avec succ√®s');
        return;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la suppression de l\'oiseau: $e');
      if (e.toString().contains('404')) {
        throw Exception('Oiseau non trouv√©');
      } else if (e.toString().contains('401')) {
        throw Exception('Non autoris√©');
      } else if (e.toString().contains('500')) {
        throw Exception('Erreur serveur. Veuillez r√©essayer plus tard.');
      }
      rethrow;
    }
  }

  // Marquer un oiseau comme vendu
  Future<Bird> sellBird(
    String id,
    double price,
    String buyerNationalId,
    String buyerFullName, {
    String? buyerPhone,
  }) async {
    try {
      print('üîÑ Marquage de l\'oiseau $id comme vendu...');
      final response = await _apiService.put('birds/$id/sell', {
        'price': price,
        'buyerInfo': {
          'nationalId': buyerNationalId,
          'fullName': buyerFullName,
          'phone': buyerPhone ?? '',
        },
      });

      if (response is Map) {
        final updatedBird = Bird.fromApi(Map<String, dynamic>.from(response));
        print('‚úÖ Oiseau marqu√© comme vendu: ${updatedBird.identifier}');
        return updatedBird;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      throw Exception('Format de r√©ponse invalide');
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la vente de l\'oiseau: $e');
      throw Exception('Error selling bird: ${e.toString()}');
    }
  }

  // R√©cup√©rer les oiseaux disponibles √† la vente
  Future<List<Bird>> getBirdsForSale() async {
    try {
      print('üîÑ R√©cup√©ration des oiseaux disponibles √† la vente...');
      final response = await _apiService.get('birds/for-sale');
      print('üì¶ R√©ponse API: $response');

      if (response is List) {
        final birds = response.map((json) => Bird.fromApi(json)).toList();
        print('‚úÖ ${birds.length} oiseaux disponibles √† la vente r√©cup√©r√©s');
        return birds;
      } else if (response is Map && response['data'] is List) {
        final birds =
            (response['data'] as List)
                .map((json) => Bird.fromApi(json))
                .toList();
        print('‚úÖ ${birds.length} oiseaux disponibles √† la vente r√©cup√©r√©s');
        return birds;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      return [];
    } catch (e) {
      print(
        '‚ö†Ô∏è Erreur lors de la r√©cup√©ration des oiseaux disponibles √† la vente: $e',
      );
      return [];
    }
  }

  // R√©cup√©rer les oiseaux disponibles (non vendus et non appari√©s)
  Future<List<Bird>> getAvailableBirds() async {
    try {
      print('üîÑ R√©cup√©ration des oiseaux disponibles...');
      final response = await _apiService.get('birds/available');
      print('üì¶ R√©ponse API: $response');

      if (response is List) {
        final birds = response.map((json) => Bird.fromApi(json)).toList();
        print('‚úÖ ${birds.length} oiseaux disponibles r√©cup√©r√©s');
        return birds;
      } else if (response is Map && response['data'] is List) {
        final birds =
            (response['data'] as List)
                .map((json) => Bird.fromApi(json))
                .toList();
        print('‚úÖ ${birds.length} oiseaux disponibles r√©cup√©r√©s');
        return birds;
      }

      print('‚ö†Ô∏è Format de r√©ponse invalide: $response');
      return [];
    } catch (e) {
      print('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des oiseaux disponibles: $e');
      return [];
    }
  }
}
